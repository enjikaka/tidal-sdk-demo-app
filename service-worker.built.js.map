{
  "version": 3,
  "sources": ["node_modules/workbox-core/_version.js", "node_modules/workbox-core/models/messages/messageGenerator.js", "node_modules/workbox-core/_private/WorkboxError.js", "node_modules/workbox-core/models/quotaErrorCallbacks.js", "node_modules/workbox-core/_private/cacheNames.js", "node_modules/workbox-core/_private/cacheMatchIgnoreParams.js", "node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js", "node_modules/workbox-core/_private/Deferred.js", "node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js", "node_modules/workbox-core/_private/getFriendlyURL.js", "node_modules/workbox-core/_private/timeout.js", "node_modules/workbox-core/_private/waitUntil.js", "node_modules/workbox-core/copyResponse.js", "node_modules/workbox-core/clientsClaim.js", "node_modules/workbox-core/skipWaiting.js", "node_modules/workbox-routing/_version.js", "node_modules/workbox-routing/utils/constants.js", "node_modules/workbox-routing/utils/normalizeHandler.js", "node_modules/workbox-routing/Route.js", "node_modules/workbox-routing/RegExpRoute.js", "node_modules/workbox-routing/Router.js", "node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js", "node_modules/workbox-routing/registerRoute.js", "node_modules/workbox-precaching/_version.js", "node_modules/workbox-precaching/utils/createCacheKey.js", "node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js", "node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js", "node_modules/workbox-strategies/_version.js", "node_modules/workbox-strategies/StrategyHandler.js", "node_modules/workbox-strategies/Strategy.js", "node_modules/workbox-precaching/PrecacheStrategy.js", "node_modules/workbox-precaching/PrecacheController.js", "node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js", "node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js", "node_modules/workbox-precaching/utils/generateURLVariations.js", "node_modules/workbox-precaching/PrecacheRoute.js", "node_modules/workbox-precaching/addRoute.js", "node_modules/workbox-precaching/precache.js", "node_modules/workbox-precaching/precacheAndRoute.js", "service-worker/src/helpers.js", "service-worker/src/routes/home.js", "service-worker/src/routes/playlist.js", "service-worker/src/routes/myMixes.js", "service-worker/src/routes/myPlaylists.js", "service-worker/src/service-worker.js"],
  "sourcesContent": ["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n", "/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n", "/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport './_version.js';\n/**\n * This method is deprecated, and will be removed in Workbox v7.\n *\n * Calling self.skipWaiting() is equivalent, and should be used instead.\n *\n * @memberof workbox-core\n */\nfunction skipWaiting() {\n    // Just call self.skipWaiting() directly.\n    // See https://github.com/GoogleChrome/workbox/issues/2525\n    if (process.env.NODE_ENV !== 'production') {\n        logger.warn(`skipWaiting() from workbox-core is no longer recommended ` +\n            `and will be removed in Workbox v7. Using self.skipWaiting() instead ` +\n            `is equivalent.`);\n    }\n    void self.skipWaiting();\n}\nexport { skipWaiting };\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n", "/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n", "function parseISODurationToTime(duration) {\n  const regex = /P(?:T)?(?:(\\d+)M)?(?:(\\d+)S)?/;\n  const matches = duration.match(regex);\n  const minutes = parseInt(matches[1] || 0, 10);\n  const seconds = parseInt(matches[2] || 0, 10);\n\n  // Calculate total seconds\n  const totalSeconds = (minutes * 60) + seconds;\n\n  // Calculate hours, minutes, and seconds\n  const hours = Math.floor(totalSeconds / 3600);\n  const remainingSeconds = totalSeconds % 3600;\n  const mins = Math.floor(remainingSeconds / 60);\n  const secs = remainingSeconds % 60;\n\n  // Format as hh:mm:ss or mm:ss if hours are 0\n  const formattedTime =\n    (hours > 0 ? String(hours).padStart(2, '0') + ':' : '') +\n    String(mins).padStart(2, '0') + ':' +\n    String(secs).padStart(2, '0');\n\n  return formattedTime;\n}\n\nexport function sortIncludedByRelationships(json) {\n  const relationshipData = [];\n\n  // Collect all relationship data into a flat array\n  Object.keys(json.data.relationships).forEach(relationshipKey => {\n    const relationship = json.data.relationships[relationshipKey].data;\n\n    // Handle single or multiple relationships\n    if (Array.isArray(relationship)) {\n      relationshipData.push(...relationship);\n    } else {\n      relationshipData.push(relationship);\n    }\n  });\n\n  // Sort the included array based on relationship order\n  json.included.sort((a, b) => {\n    const aIndex = relationshipData.findIndex(rel => rel.id === a.id && rel.type === a.type);\n    const bIndex = relationshipData.findIndex(rel => rel.id === b.id && rel.type === b.type);\n    return aIndex - bIndex;\n  });\n\n  return json.included; // Now sorted according to relationships order\n}\n\nexport function artistLinks(artists) {\n  return artists.map(artist => `\n    <a href=\"#!/artist/${artist.id}\" slot=\"artists\">${artist.name}</a>\n  `.trim()).join(', ')\n}\n\nexport function itemToArtistLink(artist) {\n  const image = `\n    <tidal-image sizes=\"128px\" resource-id=\"${artist.picture}\" image-type=\"artist\" slot=\"image\"></tidal-image>\n  `;\n\n  return `\n    <album-link>\n      <a slot=\"album\" href=\"#!/artist/${artist.id}\">${artist.name}</a>\n      ${image}\n    </album-link>\n  `;\n}\n\n/**\n* @param {{ mediaProduct: MediaProduct, album: Album, artist: Artist }} item\n* @param {{ albumColumn: boolean, coverColumn: boolean, authorization: string }} param1\n* @returns\n*/\nexport async function itemToMediaItemRow(item, { albumColumn, coverColumn, authorization }) {\n const { mediaProduct, album, artist } = item;\n\n return `\n   <media-item-row item-type=\"${mediaProduct.type === 'videos' ? 'video' : 'track'}\" item-id=\"${mediaProduct.id}\" ${albumColumn ? 'album-cell' : ''} ${coverColumn ? 'cover-cell' : ''}>\n     <span slot=\"title\">${mediaProduct.attributes.title}${mediaProduct.attributes.mediaTags.includes('HI_RES') ? ' (MAX)' : ''}</span>\n     <span slot=\"artist\">${artist.attributes.name}</span>\n     <span slot=\"album\">${album.attributes.title}</span>\n     <span slot=\"duration\">${parseISODurationToTime(mediaProduct.attributes.duration)}</span>\n   </media-item-row>\n `;\n}\n\nfunction imageForPlaylist(mix) {\n  const src = mix.imageLinks[0].href;\n  const srcset = Object.values(mix.imageLinks).map(v => `${v.href} ${v.meta.width}w`).join(', ');\n\n  return `<img slot=\"image\" loading=\"lazy\" decoding=\"async\" src=\"${src}\" srcset=\"${srcset}\" sizes=\"128px\" width=\"128px\" height=\"128px\" crossorigin=\"anonymous\">`;\n}\n\n/**\n * Build My Mixes module.\n *\n * @param {string} authorization\n * @param {'vertical' | 'horizontal'} position\n * @returns\n */\nexport const fetchMyMixes = async (authorization, position) => {\n  const items = await myMixesAsAlbumLinks(authorization);\n  const elementName = position === 'vertical' ? 'griddy-grid' : 'horizontal-grid';\n\n  return `\n    <h2>My Mixes</h2>\n    <${elementName}>${items.length === 0 ? 'No mixes found' : items}</${elementName}>\n  `;\n};\n\n/**\n * Build My Playlists module.\n *\n * @param {string} authorization\n * @param {'vertical' | 'horizontal'} position\n * @returns\n */\nexport const fetchMyPlaylists = async (authorization, position) => {\n  const items = await myPlaylistsAsAlbumLinks(authorization);\n  const elementName = position === 'vertical' ? 'griddy-grid' : 'horizontal-grid';\n\n  return `\n    <h2>My Playlists</h2>\n    <${elementName}>${items.length === 0 ? 'No playlists found' : items}</${elementName}>\n  `;\n};\n\n/**\n *\n * @param {string} authorization\n * @returns\n */\nasync function myPlaylistsAsAlbumLinks (authorization) {\n  const response = await fetch('https://openapi.tidal.com/v2/playlists/me', {\n    headers: new Headers({\n      'authorization': authorization\n    })\n  });\n  const json = await response.json();\n\n  return json.data.map(playlistDataToAlbumLink).join('');\n}\n\nconst playlistDataToAlbumLink = ({ attributes: playlist, id }) => {\n  const link = `playlists/${id}`;\n  const image = imageForPlaylist(playlist);\n\n  return `\n    <album-link>\n      <a slot=\"album\" href=\"#!/${link}\">${playlist.name}</a>\n      ${playlist.description}\n      ${image}\n    </album-link>\n  `;\n};\n\n/**\n *\n * @param {string} authorization\n * @returns\n */\nasync function myMixesAsAlbumLinks (authorization) {\n  const userRecommendationsRespone = await fetch('https://openapi.tidal.com/v2/userRecommendations/me?include=myMixes,discoveryMixes,newArrivalMixes', {\n    headers: new Headers({\n      'authorization': authorization\n    })\n  });\n  const userRecommendationsJson = await userRecommendationsRespone.json();\n\n  return userRecommendationsJson.included\n    .sort(myMixesNameSorter)\n    .map(playlistDataToAlbumLink).join('');\n}\n\nconst myMixesNameSorter = (a, b) => {\n  const specialItems = [\"My Daily Discovery\", \"My New Arrivals\"];\n\n  if (specialItems.includes(a.attributes.name) && !specialItems.includes(b.attributes.name)) {\n    return -1;\n  }\n  if (!specialItems.includes(a.attributes.name) && specialItems.includes(b.attributes.name)) {\n    return 1;\n  }\n\n  // Handle the \"My Mix X\" sorting by extracting the number X\n  const myMixRegex = /My Mix (\\d+)/;\n  const aMatch = a.attributes.name.match(myMixRegex);\n  const bMatch = b.attributes.name.match(myMixRegex);\n\n  if (aMatch && bMatch) {\n    return parseInt(aMatch[1]) - parseInt(bMatch[1]);\n  }\n\n  return 0; // Default, in case items don't match \"My Mix X\"\n};\n", "import { fetchMyMixes, fetchMyPlaylists } from \"../helpers.js\";\n\n/**\n *\n * @param {Request} request\n * @returns {Promise<Response>}\n */\nexport async function homeRouteHandler (request) {\n  const authorization = request.headers.get('authorization');\n\n  const [myMixes, myPlaylists] = await Promise.all([\n    fetchMyMixes(authorization, 'horizontal'),\n    fetchMyPlaylists(authorization, 'horizontal'),\n  ]);\n\n  return new Response(\n    myMixes + myPlaylists,\n    {\n      status: 200,\n      headers: new Headers({\n        'content-type': 'text/html'\n      })\n    }\n  );\n}\n", "import { itemToMediaItemRow, sortIncludedByRelationships } from \"../helpers.js\";\n\n/**\n *\n * @param {Request} request\n * @returns {Promise<Response>}\n */\nexport async function playlistRouteHandler (request) {\n  const authorization = request.headers.get('authorization');\n  const url = new URL(request.url);\n  const [,,, playlistId] = url.pathname.split('/');\n\n  const response = await fetch(`https://openapi.tidal.com/v2/playlists/${playlistId}?countryCode=SE&include=items`, {\n    headers: new Headers({\n      'authorization': authorization\n    })\n  });\n\n  const json = await response.json();\n\n  /** @type {Array<MediaProduct>} */\n  const included = sortIncludedByRelationships(json);\n  const itemsIds = included.map(item => item.id);\n\n  const _url = new URL(`https://openapi.tidal.com/v2/tracks?countryCode=SE&include=albums,artists`);\n\n  _url.searchParams.set('filter[id]', itemsIds.join(','));\n\n  const itemMetaDataResponse =  await fetch(_url.toString(), {\n    headers: new Headers({\n      'authorization': authorization\n    })\n  });\n  const itemMetadataJson = await itemMetaDataResponse.json();\n\n  const playlistItems = itemMetadataJson.data.map(item => {\n    const mediaProduct = item;\n    const albumId = item.relationships.albums.data[0].id;\n    const album = itemMetadataJson.included.find(i => i.id === albumId);\n    const artistId = item.relationships.artists.data[0].id;\n    const artist = itemMetadataJson.included.find(i => i.id === artistId);\n\n    return {\n      mediaProduct,\n      album,\n      artist\n    }\n  });\n\n  const items = await Promise.all(playlistItems.map(item => itemToMediaItemRow(item, { authorization, albumColumn: false, coverColumn: false })));\n\n  return new Response(\n    `\n      <h2>${json.data.attributes.name}</h2>\n      <p>${json.data.attributes.description}</p>\n      <hr>\n      ${items.join('')}\n    `,\n    {\n      status: 200,\n      headers: new Headers({\n        'content-type': 'text/html'\n      })\n    }\n  );\n}", "import { fetchMyMixes } from \"../helpers.js\";\n\n/**\n *\n * @param {Request} request\n * @returns {Promise<Response>}\n */\nexport async function myMixesRouteHandler (request) {\n  const authorization = request.headers.get('authorization');\n\n  const myMixes = await fetchMyMixes(authorization, 'vertical')\n\n  return new Response(\n    myMixes,\n    {\n      status: 200,\n      headers: new Headers({\n        'content-type': 'text/html'\n      })\n    }\n  );\n}", "import { fetchMyPlaylists } from \"../helpers.js\";\n\n/**\n *\n * @param {Request} request\n * @returns {Promise<Response>}\n */\nexport async function myPlaylistsRouteHandler (request) {\n  const authorization = request.headers.get('authorization');\n\n  const myMixes = await fetchMyPlaylists(authorization, 'vertical')\n\n  return new Response(\n    myMixes,\n    {\n      status: 200,\n      headers: new Headers({\n        'content-type': 'text/html'\n      })\n    }\n  );\n}", "/* eslint-env worker */\n// @ts-expect-error - Global workbox variable\n__WB_DISABLE_DEV_LOGS = true;\n\nimport { skipWaiting, clientsClaim } from 'workbox-core';\nimport { registerRoute } from 'workbox-routing';\nimport { precacheAndRoute } from 'workbox-precaching';\n\nimport { homeRouteHandler } from './routes/home';\nimport { playlistRouteHandler } from './routes/playlist';\nimport { myMixesRouteHandler } from './routes/myMixes';\nimport { myPlaylistsRouteHandler } from './routes/myPlaylists';\n\n// @ts-expect-error - Workbox variable\nprecacheAndRoute(self.__WB_MANIFEST);\n\nasync function pagesRouteHandler(details) {\n  // @ts-expect-error - TS doesn't know about URLPattern yet\n  const pattern1 = new URLPattern({ pathname: '/pages/:page/:subpage?' });\n  // @ts-expect-error - TS doesn't know about URLPattern yet\n  const pattern2 = new URLPattern({ pathname: '/pages/:page/:subpage?/' });\n\n  const match1 = pattern1.exec(details.url);\n  const match2 = pattern2.exec(details.url);\n\n  if (match1 || match2) {\n    const match = match1 || match2;\n\n    switch (match.pathname.groups.page) {\n      case 'home':\n        return homeRouteHandler(details.request);\n      case 'playlists':\n        return playlistRouteHandler(details.request);\n      case 'my-mixes':\n        return myMixesRouteHandler(details.request);\n      case 'my-playlists':\n        return myPlaylistsRouteHandler(details.request);\n      default:\n        console.log('404 Page Not Found');\n        break;\n    }\n  } else {\n    return new Response(\n      null,\n      {\n        status: 404\n      }\n    );\n  }\n}\n\nregisterRoute(\n  ({ request }) => request.url.includes('/pages/'),\n  async details => pagesRouteHandler(details)\n);\n\nskipWaiting();\nclientsClaim();\n"],
  "mappings": "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",
  "names": ["fallback", "code", "args", "msg", "messageGenerator", "fallback", "WorkboxError", "errorCode", "details", "message", "messageGenerator", "quotaErrorCallbacks", "_cacheNameDetails", "_createCacheName", "cacheName", "value", "eachCacheNameDetail", "fn", "key", "cacheNames", "details", "userCacheName", "stripParams", "fullURL", "ignoreParams", "strippedURL", "param", "cacheMatchIgnoreParams", "cache", "request", "matchOptions", "strippedRequestURL", "keysOptions", "cacheKeys", "cacheKey", "strippedCacheKeyURL", "supportStatus", "canConstructResponseFromBodyStream", "testResponse", "Deferred", "resolve", "reject", "executeQuotaErrorCallbacks", "callback", "quotaErrorCallbacks", "getFriendlyURL", "url", "timeout", "ms", "resolve", "waitUntil", "event", "asyncFn", "returnPromise", "copyResponse", "response", "modifier", "origin", "WorkboxError", "clonedResponse", "responseInit", "modifiedResponseInit", "body", "canConstructResponseFromBodyStream", "clientsClaim", "skipWaiting", "defaultMethod", "normalizeHandler", "handler", "Route", "match", "handler", "method", "defaultMethod", "normalizeHandler", "RegExpRoute", "Route", "regExp", "handler", "method", "match", "url", "result", "Router", "event", "request", "responsePromise", "payload", "requestPromises", "entry", "url", "sameOrigin", "params", "route", "handler", "debugMessages", "method", "err", "catchHandler", "catchErr", "routes", "matchResult", "defaultMethod", "normalizeHandler", "WorkboxError", "routeIndex", "defaultRouter", "getOrCreateDefaultRouter", "Router", "registerRoute", "capture", "handler", "method", "route", "captureUrl", "matchCallback", "url", "Route", "RegExpRoute", "WorkboxError", "getOrCreateDefaultRouter", "REVISION_SEARCH_PARAM", "createCacheKey", "entry", "WorkboxError", "urlObject", "revision", "url", "cacheKeyURL", "originalURL", "PrecacheInstallReportPlugin", "request", "state", "event", "cachedResponse", "url", "PrecacheCacheKeyPlugin", "precacheController", "request", "params", "cacheKey", "toRequest", "input", "StrategyHandler", "strategy", "options", "Deferred", "plugin", "event", "request", "possiblePreloadResponse", "originalRequest", "cb", "err", "WorkboxError", "pluginFilteredRequest", "fetchResponse", "callback", "error", "response", "responseClone", "key", "cachedResponse", "cacheName", "matchOptions", "effectiveRequest", "multiMatchOptions", "timeout", "getFriendlyURL", "responseToCache", "cache", "hasCacheUpdateCallback", "oldResponse", "cacheMatchIgnoreParams", "executeQuotaErrorCallbacks", "mode", "name", "param", "state", "statefulParam", "promise", "pluginsUsed", "Strategy", "options", "cacheNames", "responseDone", "event", "request", "params", "handler", "StrategyHandler", "handlerDone", "response", "WorkboxError", "error", "callback", "waitUntilError", "PrecacheStrategy", "_PrecacheStrategy", "Strategy", "options", "cacheNames", "request", "handler", "response", "params", "integrityInManifest", "integrityInRequest", "noIntegrityConflict", "wasCached", "WorkboxError", "defaultPluginIndex", "cacheWillUpdatePluginCount", "index", "plugin", "copyResponse", "PrecacheController", "cacheName", "plugins", "fallbackToNetwork", "PrecacheStrategy", "cacheNames", "PrecacheCacheKeyPlugin", "entries", "urlsToWarnAbout", "entry", "cacheKey", "url", "createCacheKey", "cacheMode", "WorkboxError", "warningMessage", "event", "waitUntil", "installReportPlugin", "PrecacheInstallReportPlugin", "integrity", "request", "updatedURLs", "notUpdatedURLs", "cache", "currentlyCachedRequests", "expectedCacheKeys", "deletedURLs", "urlObject", "options", "precacheController", "getOrCreatePrecacheController", "PrecacheController", "removeIgnoredSearchParams", "urlObject", "ignoreURLParametersMatching", "paramName", "regExp", "generateURLVariations", "url", "ignoreURLParametersMatching", "directoryIndex", "cleanURLs", "urlManipulation", "urlObject", "urlWithoutIgnoredParams", "removeIgnoredSearchParams", "directoryURL", "cleanURL", "additionalURLs", "urlToAttempt", "PrecacheRoute", "Route", "precacheController", "options", "match", "request", "urlsToCacheKeys", "possibleURL", "generateURLVariations", "cacheKey", "integrity", "addRoute", "options", "precacheController", "getOrCreatePrecacheController", "precacheRoute", "PrecacheRoute", "registerRoute", "precache", "entries", "getOrCreatePrecacheController", "precacheAndRoute", "entries", "options", "precache", "addRoute", "parseISODurationToTime", "duration", "regex", "matches", "minutes", "seconds", "totalSeconds", "hours", "remainingSeconds", "mins", "secs", "sortIncludedByRelationships", "json", "relationshipData", "relationshipKey", "relationship", "a", "b", "aIndex", "rel", "bIndex", "itemToMediaItemRow", "item", "albumColumn", "coverColumn", "authorization", "mediaProduct", "album", "artist", "parseISODurationToTime", "imageForPlaylist", "mix", "src", "srcset", "v", "fetchMyMixes", "position", "items", "myMixesAsAlbumLinks", "elementName", "fetchMyPlaylists", "myPlaylistsAsAlbumLinks", "playlistDataToAlbumLink", "playlist", "id", "link", "image", "myMixesNameSorter", "a", "b", "specialItems", "myMixRegex", "aMatch", "bMatch", "homeRouteHandler", "request", "authorization", "myMixes", "myPlaylists", "fetchMyMixes", "fetchMyPlaylists", "playlistRouteHandler", "request", "authorization", "url", "playlistId", "json", "itemsIds", "sortIncludedByRelationships", "item", "_url", "itemMetadataJson", "playlistItems", "mediaProduct", "albumId", "album", "i", "artistId", "artist", "items", "itemToMediaItemRow", "myMixesRouteHandler", "request", "authorization", "myMixes", "fetchMyMixes", "myPlaylistsRouteHandler", "request", "authorization", "myMixes", "fetchMyPlaylists", "precacheAndRoute", "pagesRouteHandler", "details", "pattern1", "pattern2", "match1", "match2", "homeRouteHandler", "playlistRouteHandler", "myMixesRouteHandler", "myPlaylistsRouteHandler", "registerRoute", "request", "skipWaiting", "clientsClaim"]
}
